version: 2.1

executors:
  python-executor:
    docker:
      - image: circleci/python:3.9  # Ajusta la versión de Python según lo necesario
    working_directory: ~/repo

jobs:
  checkout_code:
    executor: python-executor
    steps:
      - checkout  # Clona el repositorio

  install_dependencies:
    executor: python-executor
    steps:
      - checkout  # Asegura que el código esté disponible
      - run:
          name: Instalar dependencias
          command: |
            python -m pip install --upgrade pip
            pip install -r requirements.txt

  apply_migrations:
    executor: python-executor
    steps:
      - checkout
      - run:
          name: Aplicar Migraciones
          command: |
            python manage.py migrate --noinput

  parallel_tests:
    executor: python-executor
    parallelism: 4  # Distribuye las pruebas entre 4 contenedores
    steps:
      - checkout
      - run:
          name: Instalar dependencias
          command: |
            pip install -r requirements.txt
      - run:
          name: Ejecutar pruebas en paralelo
          command: |
            python manage.py test --parallel 4

  start_server:
    executor: python-executor
    steps:
      - checkout
      - run:
          name: Verificar que el servidor se inicia correctamente
          command: |
            python manage.py runserver 0.0.0.0:8000 --noreload &
            sleep 10  # Esperar que el servidor arranque
            curl --fail http://localhost:8000 || (echo "El servidor no pudo arrancar" && exit 1)

workflows:
  version: 2

  setup_workflow:
    jobs:
      - checkout_code
      - install_dependencies
      - apply_migrations

  validation_workflow:
    jobs:
      - parallel_tests:
          requires:
            - apply_migrations  # Ahora este job está dentro del mismo workflow
      - start_server:
          requires:
            - parallel_tests

# Configuración de notificaciones de Slack
notify:
  slack:
    branches:
      only:
        - main  # Notifica solo cambios en la rama principal
    template: |
      Pipeline {{ .Pipeline.Number }} - {{ .Workflow.Name }}: {{ .Status }}
    webhooks:
      - url: "<TU_WEBHOOK_SLACK>"
    on_success:
      message: ":white_check_mark: Todo pasó exitosamente en {{ .Workflow.Name }}"
    on_fail:
      message: ":x: Hubo un fallo en {{ .Workflow.Name }}. Revisa el pipeline."
